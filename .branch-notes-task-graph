TASK GRAPH OUTLINE

Module role: record task lineage as a directed graph

Minimal functionality:
- thread-safe
- accept pairs of task IDs to record
- write graph data to file as a plain-text adjacency list

Nice to have:
- other output formats e.g. dot-file, json
- add node metadata e.g. task type, task flags, generation, parent task, # children, parallel region, 
  spawning thread, 

Later:
- produce graph of dependences between sibling tasks due to depend() clause


=====================

Implementation:

data structures:

subgraph -> dynamic array of a task's children (1 per task) 
graph -> queue of pointers to subgraphs (1 global) (includes its own mutexes for atomic access)

functionality:

- program start -> new graph
- task create -> append child to subgraph (if it doesn't exist, create and atomically add to queue)
- program end -> output graph to file

- each task stores pointer to its subgraph, only created when a task spawns its first child.
- pointer to graph stored by caller, only accessed atomically to add subgraphs and at program
  end to output to file.
